{"ast":null,"code":"import { of } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor() {\n      this.initializeDefaultAdmin();\n    }\n\n    initializeDefaultAdmin() {\n      let storedUsers = JSON.parse(localStorage.getItem('users')) || []; // Remove \"mariami\" user if exists\n\n      storedUsers = storedUsers.filter(user => user.email !== 'mariami@gmail.com'); // Find \"shota\" user and update role to \"Admin\"\n\n      storedUsers = storedUsers.map(user => {\n        if (user.email === 'sh.murjikneli@gmail.com') {\n          user.role = 'Admin';\n        }\n\n        return user;\n      });\n      localStorage.setItem('users', JSON.stringify(storedUsers)); // Update current logged-in user if it's not the defaultAdmin\n\n      const currentUser = JSON.parse(localStorage.getItem('user'));\n\n      if (currentUser && currentUser.email === 'mariami@gmail.com') {\n        const defaultAdmin = {\n          id: 1,\n          username: 'shota',\n          email: 'sh.murjikneli@gmail.com',\n          password: 'shota123',\n          role: 'Admin'\n        };\n        localStorage.setItem('user', JSON.stringify(defaultAdmin));\n      }\n    }\n\n    register(username, email, password) {\n      const user = {\n        id: Math.floor(Math.random() * 1000),\n        username,\n        email,\n        password,\n        role: 'User'\n      };\n      let storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n\n      if (storedUsers.some(u => u.email === email)) {\n        return of({\n          error: 'Email already exists'\n        }).pipe(catchError(this.handleError('register')));\n      }\n\n      storedUsers.push(user);\n      localStorage.setItem('users', JSON.stringify(storedUsers));\n      console.log('მომხმარებელი დარეგისტრირდა:', user);\n      return of(user);\n    }\n\n    login(email, password) {\n      console.log('ავტორიზაცია ხდება:', {\n        email,\n        password\n      });\n      let storedUsers = JSON.parse(localStorage.getItem('users')) || [];\n      let user = storedUsers.find(u => u.email === email && u.password === password);\n\n      if (user) {\n        console.log('მომხმარებელი ნაპოვნია:', user);\n        localStorage.setItem('user', JSON.stringify(user));\n        return of(user);\n      } else {\n        console.error('არასწორი მონაცემები');\n        return of({\n          error: 'Invalid credentials'\n        });\n      }\n    }\n\n    logout() {\n      localStorage.removeItem('user');\n    }\n\n    isLoggedIn() {\n      return !!localStorage.getItem('user');\n    }\n\n    handleError(operation = 'operation', result) {\n      return error => {\n        console.error(error);\n        return of(result);\n      };\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)();\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}